// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Range = require("bs-platform/lib/js/belt_Range.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Evaluators$NactRecron = require("../src/Evaluators.bs.js");

function randomTime(start, end_, step) {
  return Caml_int32.imul(Random.$$int(Caml_int32.div(end_ - start | 0, step)), step) + start | 0;
}

function testIsInExpr(name, f, $staropt$star, upperBound) {
  var lowerBound = $staropt$star ? $staropt$star[0] : 0;
  var randomTime$1 = function ($staropt$star, $staropt$star$1, $staropt$star$2, _) {
    var start = $staropt$star ? $staropt$star[0] : lowerBound;
    var end_ = $staropt$star$1 ? $staropt$star$1[0] : upperBound;
    var step = $staropt$star$2 ? $staropt$star$2[0] : 1;
    return randomTime(start, end_, step);
  };
  var testRandomValues = function (size) {
    var values = Belt_Array.map(Belt_Array.range(0, size), (function () {
              return randomTime$1(/* None */0, /* None */0, /* None */0, /* () */0);
            })).sort();
    var interval = Belt_List.fromArray(Belt_Array.range(lowerBound, upperBound));
    var match = Belt_List.partition(interval, (function (i) {
            return Belt_Array.some(values, (function (j) {
                          return +(i === j);
                        }));
          }));
    var inValuesTest = function (i) {
      return Jest.test("Time " + (String(i) + "which is in the set of supplied values should evaluate to true"), (function () {
                    return Jest.ExpectJs[/* toBe */2](/* true */1, Jest.ExpectJs[/* expect */0](Curry._2(f, i, /* `Values */[
                                        72054786,
                                        values
                                      ])));
                  }));
    };
    var outOfValuesTest = function (i) {
      return Jest.test("Time " + (String(i) + "which is not in the set of supplied values should evaluate to false"), (function () {
                    return Jest.ExpectJs[/* toBe */2](/* false */0, Jest.ExpectJs[/* expect */0](Curry._2(f, i, /* `Values */[
                                        72054786,
                                        values
                                      ])));
                  }));
    };
    Belt_List.forEach(match[0], inValuesTest);
    return Belt_List.forEach(match[1], outOfValuesTest);
  };
  var testRandomInterval = function () {
    var timeA = randomTime$1(/* None */0, /* None */0, /* None */0, /* () */0);
    var timeB = randomTime$1(/* None */0, /* None */0, /* None */0, /* () */0);
    var start = timeA < timeB ? timeA : timeB;
    var end_ = timeA > timeB ? timeA : timeB;
    var step = Random.$$int(10) + 1 | 0;
    var interval = Belt_Array.rangeBy(start, end_, step);
    var inIntervalTest = function (i) {
      return Jest.test("Time " + (String(i) + (" which is inside the interval [" + (String(start) + (", " + (String(end_) + ("] with a step size of" + (String(step) + " should evaluate to true"))))))), (function () {
                    return Jest.ExpectJs[/* toBe */2](/* true */1, Jest.ExpectJs[/* expect */0](Curry._2(f, i, /* `Interval */[
                                        36582757,
                                        /* tuple */[
                                          start,
                                          end_,
                                          step
                                        ]
                                      ])));
                  }));
    };
    var outOfIntervalTest = function (i) {
      return Jest.test("Time " + (String(i) + (" which is outside of the interval [" + (String(start) + (", " + (String(end_) + ("] with a step size of" + (String(step) + " should evaluate to false"))))))), (function () {
                    return Jest.ExpectJs[/* toBe */2](/* false */0, Jest.ExpectJs[/* expect */0](Curry._2(f, i, /* `Interval */[
                                        36582757,
                                        /* tuple */[
                                          start,
                                          end_,
                                          step
                                        ]
                                      ])));
                  }));
    };
    Belt_Array.forEach(interval, inIntervalTest);
    return Belt_Array.forEach(Belt_Array.keep(Belt_Array.range(start, end_), (function (i) {
                      return 1 - Belt_Array.some(interval, (function (j) {
                                    return +(i === j);
                                  }));
                    })), outOfIntervalTest);
  };
  describe(name, (function () {
          Jest.test("`Wildcard always evaluate to true", (function () {
                  return Jest.ExpectJs[/* toBe */2](/* true */1, Jest.ExpectJs[/* expect */0](Curry._2(f, randomTime$1(/* None */0, /* None */0, /* None */0, /* () */0), /* Wildcard */46765562)));
                }));
          Belt_Range.forEach(0, 3, testRandomInterval);
          return Belt_Range.forEach(0, 8, testRandomValues);
        }));
  return /* () */0;
}

function testIsInYear() {
  describe("isInYear", (function () {
          return Jest.test("`Wildcard always evaluate to true", (function () {
                        return Jest.ExpectJs[/* toBe */2](/* true */1, Jest.ExpectJs[/* expect */0](Evaluators$NactRecron.isInYear(2099, /* Wildcard */46765562)));
                      }));
        }));
  return /* () */0;
}

testIsInExpr("isInHour", Evaluators$NactRecron.isInHour, /* Some */[0], 23);

testIsInExpr("isInMonth", Evaluators$NactRecron.isInMonth, /* Some */[0], 23);

testIsInYear(/* () */0);

exports.randomTime = randomTime;
exports.testIsInExpr = testIsInExpr;
exports.testIsInYear = testIsInYear;
/*  Not a pure module */
