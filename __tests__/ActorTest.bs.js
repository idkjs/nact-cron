// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Nact = require("reason-nact/src/Nact.js");
var Curry = require("bs-platform/lib/js/curry.js");
var NactCron = require("../src/NactCron.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var MockPersistenceEngine = require("nact/test/mock-persistence-engine");

function $great$eq$great(f, g) {
  return f.then(Curry.__1(g));
}

var TimeKeeper = /* module */[];

function delay(ms) {
  return new Promise((function (resolve, _) {
                setTimeout((function () {
                        return resolve(/* () */0);
                      }), ms);
                return /* () */0;
              }));
}

function $$return(prim) {
  return Promise.resolve(prim);
}

function reject(msg) {
  return Promise.reject([
              Caml_builtin_exceptions.failure,
              msg
            ]);
}

var passP = Promise.resolve(Jest.pass);

describe("`StartScheduledJob", (function () {
        Jest.testPromise(/* None */0, "A well formed cron expression should be able to be added as a schedule in the cronActor", (function () {
                var system = Nact.start(/* Some */[new MockPersistenceEngine.MockPersistenceEngine()], /* None */0, /* () */0);
                var cronActor = NactCron.make(system, "test");
                var actor = Nact.spawnStateless(/* None */0, /* None */0, /* None */0, system, (function (msg, _) {
                        return Promise.resolve((console.log(msg), /* () */0));
                      }));
                var f = Nact.Operators[/* <? */2](cronActor, /* tuple */[
                      (function (temp) {
                          return /* `StartScheduledJob */[
                                  -427054286,
                                  /* tuple */[
                                    "@daily",
                                    "hi",
                                    actor,
                                    temp
                                  ]
                                ];
                        }),
                      Caml_int32.imul(500, Nact.milliseconds)
                    ]);
                return f.then((function (param) {
                              if (typeof param === "number") {
                                return Promise.reject([
                                            Caml_builtin_exceptions.failure,
                                            "`FunRandomPolymorphicVariant"
                                          ]);
                              } else if (param[0] >= 647496001) {
                                return Promise.reject([
                                            Caml_builtin_exceptions.failure,
                                            "`MalformedCronExpression"
                                          ]);
                              } else {
                                return passP;
                              }
                            }));
              }));
        return Jest.testPromise(/* None */0, "A malformed cron expression should  return the message `MalformedCronExpression", (function () {
                      var system = Nact.start(/* Some */[new MockPersistenceEngine.MockPersistenceEngine()], /* None */0, /* () */0);
                      var cronActor = NactCron.make(system, "test");
                      var actor = Nact.spawnStateless(/* None */0, /* None */0, /* None */0, system, (function (msg, _) {
                              return Promise.resolve((console.log(msg), /* () */0));
                            }));
                      var f = Nact.Operators[/* <? */2](cronActor, /* tuple */[
                            (function (temp) {
                                return /* `StartScheduledJob */[
                                        -427054286,
                                        /* tuple */[
                                          "badbadnotgood",
                                          "hi",
                                          actor,
                                          temp
                                        ]
                                      ];
                              }),
                            Caml_int32.imul(500, Nact.milliseconds)
                          ]);
                      return f.then((function (param) {
                                    if (param[0] >= 647496001) {
                                      return passP;
                                    } else {
                                      return Promise.reject([
                                                  Caml_builtin_exceptions.failure,
                                                  "This cron expression should not have been accepted by the actor"
                                                ]);
                                    }
                                  }));
                    }));
      }));

describe("`StopScheduledJob", (function () {
        Jest.testPromise(/* None */0, "Removal should be idempotent", (function () {
                var system = Nact.start(/* Some */[new MockPersistenceEngine.MockPersistenceEngine()], /* None */0, /* () */0);
                var cronActor = NactCron.make(system, "test");
                var actor = Nact.spawnStateless(/* None */0, /* None */0, /* None */0, system, (function (msg, _) {
                        return Promise.resolve((console.log(msg), /* () */0));
                      }));
                var f = Nact.Operators[/* <? */2](cronActor, /* tuple */[
                      (function (temp) {
                          return /* `StartScheduledJob */[
                                  -427054286,
                                  /* tuple */[
                                    "@daily",
                                    "hi",
                                    actor,
                                    temp
                                  ]
                                ];
                        }),
                      Caml_int32.imul(500, Nact.milliseconds)
                    ]);
                var f$1 = f.then((function (param) {
                        if (param[0] >= 647496001) {
                          return Promise.reject([
                                      Caml_builtin_exceptions.failure,
                                      "`MalformedCronExpression"
                                    ]);
                        } else {
                          var id = param[1];
                          Nact.Operators[/* <-< */0](cronActor, /* `StopScheduledJob */[
                                -202624238,
                                /* tuple */[
                                  id,
                                  Nact.nobody(/* () */0)
                                ]
                              ]);
                          return Nact.Operators[/* <? */2](cronActor, /* tuple */[
                                      (function (temp) {
                                          return /* `StopScheduledJob */[
                                                  -202624238,
                                                  /* tuple */[
                                                    id,
                                                    temp
                                                  ]
                                                ];
                                        }),
                                      Caml_int32.imul(500, Nact.milliseconds)
                                    ]);
                        }
                      }));
                return f$1.then((function () {
                              return passP;
                            }));
              }));
        return Jest.testPromise(/* None */0, "A previously created job should be able to be sucessfully removed", (function () {
                      var system = Nact.start(/* Some */[new MockPersistenceEngine.MockPersistenceEngine()], /* None */0, /* () */0);
                      var cronActor = NactCron.make(system, "test");
                      var actor = Nact.spawnStateless(/* None */0, /* None */0, /* None */0, system, (function (msg, _) {
                              return Promise.resolve((console.log(msg), /* () */0));
                            }));
                      var f = Nact.Operators[/* <? */2](cronActor, /* tuple */[
                            (function (temp) {
                                return /* `StartScheduledJob */[
                                        -427054286,
                                        /* tuple */[
                                          "@daily",
                                          "hi",
                                          actor,
                                          temp
                                        ]
                                      ];
                              }),
                            Caml_int32.imul(500, Nact.milliseconds)
                          ]);
                      var f$1 = f.then((function (param) {
                              if (param[0] >= 647496001) {
                                return Promise.reject([
                                            Caml_builtin_exceptions.failure,
                                            "`MalformedCronExpression"
                                          ]);
                              } else {
                                var id = param[1];
                                return Nact.Operators[/* <? */2](cronActor, /* tuple */[
                                            (function (temp) {
                                                return /* `StopScheduledJob */[
                                                        -202624238,
                                                        /* tuple */[
                                                          id,
                                                          temp
                                                        ]
                                                      ];
                                              }),
                                            Caml_int32.imul(500, Nact.milliseconds)
                                          ]);
                              }
                            }));
                      var f$2 = f$1.then((function (param) {
                              var id = param[1];
                              return Nact.Operators[/* <? */2](cronActor, /* tuple */[
                                          (function (temp) {
                                              return /* `GetScheduledJob */[
                                                      726695270,
                                                      /* tuple */[
                                                        id,
                                                        temp
                                                      ]
                                                    ];
                                            }),
                                          Caml_int32.imul(500, Nact.milliseconds)
                                        ]);
                            }));
                      return f$2.then((function (param) {
                                    if (param[0] >= 421824786) {
                                      return Promise.reject([
                                                  Caml_builtin_exceptions.failure,
                                                  "Scheduled job should have been removed"
                                                ]);
                                    } else {
                                      return passP;
                                    }
                                  }));
                    }));
      }));

describe("`GetScheduledJobs", (function () {
        return Jest.testPromise(/* None */0, "Should be able to get a list of scheduled jobs", (function () {
                      var system = Nact.start(/* Some */[new MockPersistenceEngine.MockPersistenceEngine()], /* None */0, /* () */0);
                      var cronActor = NactCron.make(system, "test");
                      var actor = Nact.spawnStateless(/* None */0, /* None */0, /* None */0, system, (function (msg, _) {
                              return Promise.resolve((console.log(msg), /* () */0));
                            }));
                      Nact.Operators[/* <-< */0](cronActor, /* `StartScheduledJob */[
                            -427054286,
                            /* tuple */[
                              "@daily",
                              "daily",
                              actor,
                              Nact.nobody(/* () */0)
                            ]
                          ]);
                      Nact.Operators[/* <-< */0](cronActor, /* `StartScheduledJob */[
                            -427054286,
                            /* tuple */[
                              "@weekly",
                              "weekly",
                              actor,
                              Nact.nobody(/* () */0)
                            ]
                          ]);
                      Nact.Operators[/* <-< */0](cronActor, /* `StartScheduledJob */[
                            -427054286,
                            /* tuple */[
                              "@monthly",
                              "monthly",
                              actor,
                              Nact.nobody(/* () */0)
                            ]
                          ]);
                      var f = Nact.Operators[/* <? */2](cronActor, /* tuple */[
                            (function (temp) {
                                return /* `GetScheduledJobs */[
                                        991771725,
                                        temp
                                      ];
                              }),
                            Caml_int32.imul(500, Nact.milliseconds)
                          ]);
                      return f.then((function (param) {
                                    return Promise.resolve(Jest.Expect[/* toHaveLength */13](3, Jest.Expect[/* expect */0](Belt_List.toArray(param[1]))));
                                  }));
                    }));
      }));

describe("`DispatchPendingJobs", (function () {
        return /* () */0;
      }));

exports.$great$eq$great = $great$eq$great;
exports.TimeKeeper = TimeKeeper;
exports.delay = delay;
exports.$$return = $$return;
exports.reject = reject;
exports.passP = passP;
/* passP Not a pure module */
