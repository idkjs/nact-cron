// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var NactCron_Evaluators = require("./NactCron_Evaluators.bs.js");

function fromDate(date) {
  return /* record */[
          /* year */date.getUTCFullYear() | 0,
          /* month */(date.getUTCMonth() | 0) + 1 | 0,
          /* dayOfMonth */date.getUTCDate() | 0,
          /* dayOfWeek */date.getUTCDay() | 0,
          /* hour */date.getUTCHours() | 0,
          /* minute */date.getUTCMinutes() | 0,
          /* daysInMonth */(new Date(date.getUTCFullYear(), date.getUTCMonth() + 1.0, 0.0).getUTCDate() | 0) + 1 | 0
        ];
}

var Time = /* module */[/* fromDate */fromDate];

function partitionBy(lists, criteria) {
  var partitions = Belt_List.map(lists, (function (__x) {
          return Belt_List.partition(__x, criteria);
        }));
  return /* tuple */[
          Belt_List.flatten(Belt_List.map(partitions, (function (prim) {
                      return prim[0];
                    }))),
          Belt_List.flatten(Belt_List.map(partitions, (function (prim) {
                      return prim[1];
                    })))
        ];
}

function updateYears(param, param$1, _, state) {
  var year = param$1[/* year */0];
  if (param[/* year */0] === year) {
    return /* tuple */[
            /* false */0,
            state
          ];
  } else {
    var match = partitionBy(/* :: */[
          state[/* schedules */1],
          /* :: */[
            state[/* years */2],
            /* :: */[
              state[/* months */3],
              /* :: */[
                state[/* days */4],
                /* :: */[
                  state[/* hours */5],
                  /* :: */[
                    state[/* minutes */6],
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ], (function (param) {
            return NactCron_Evaluators.isInYear(year, param[1][/* years */5]);
          }));
    return /* tuple */[
            /* true */1,
            /* record */[
              /* prevTime */state[/* prevTime */0],
              /* schedules */match[1],
              /* years */match[0],
              /* months : [] */0,
              /* days : [] */0,
              /* hours : [] */0,
              /* minutes : [] */0
            ]
          ];
  }
}

function updateMonths(param, param$1, update, state) {
  var month = param$1[/* month */1];
  if (!update && param[/* month */1] === month) {
    return /* tuple */[
            /* false */0,
            state
          ];
  } else {
    var match = partitionBy(/* :: */[
          state[/* years */2],
          /* :: */[
            state[/* months */3],
            /* :: */[
              state[/* days */4],
              /* :: */[
                state[/* hours */5],
                /* :: */[
                  state[/* minutes */6],
                  /* [] */0
                ]
              ]
            ]
          ]
        ], (function (param) {
            return NactCron_Evaluators.isInMonth(month, param[1][/* months */3]);
          }));
    return /* tuple */[
            /* true */1,
            /* record */[
              /* prevTime */state[/* prevTime */0],
              /* schedules */state[/* schedules */1],
              /* years */match[1],
              /* months */match[0],
              /* days : [] */0,
              /* hours : [] */0,
              /* minutes : [] */0
            ]
          ];
  }
}

function updateDays(param, param$1, update, state) {
  var dayOfMonth = param$1[/* dayOfMonth */2];
  if (!update && param[/* dayOfMonth */2] === dayOfMonth) {
    return /* tuple */[
            /* false */0,
            state
          ];
  } else {
    var daysInMonth = param$1[/* daysInMonth */6];
    var dayOfWeek = param$1[/* dayOfWeek */3];
    var match = partitionBy(/* :: */[
          state[/* months */3],
          /* :: */[
            state[/* days */4],
            /* :: */[
              state[/* hours */5],
              /* :: */[
                state[/* minutes */6],
                /* [] */0
              ]
            ]
          ]
        ], (function (param) {
            var match = param[1];
            if (NactCron_Evaluators.isInDayOfMonth(dayOfMonth, dayOfWeek, daysInMonth, match[/* daysOfMonth */2])) {
              return NactCron_Evaluators.isInDayOfWeek(dayOfMonth, dayOfWeek, daysInMonth, match[/* daysOfWeek */4]);
            } else {
              return /* false */0;
            }
          }));
    return /* tuple */[
            /* true */1,
            /* record */[
              /* prevTime */state[/* prevTime */0],
              /* schedules */state[/* schedules */1],
              /* years */state[/* years */2],
              /* months */match[1],
              /* days */match[0],
              /* hours : [] */0,
              /* minutes : [] */0
            ]
          ];
  }
}

function updateHours(param, param$1, update, state) {
  var hour = param$1[/* hour */4];
  if (!update && param[/* hour */4] === hour) {
    return /* tuple */[
            /* false */0,
            state
          ];
  } else {
    var match = partitionBy(/* :: */[
          state[/* days */4],
          /* :: */[
            state[/* hours */5],
            /* :: */[
              state[/* minutes */6],
              /* [] */0
            ]
          ]
        ], (function (param) {
            return NactCron_Evaluators.isInHour(hour, param[1][/* hours */1]);
          }));
    return /* tuple */[
            /* true */1,
            /* record */[
              /* prevTime */state[/* prevTime */0],
              /* schedules */state[/* schedules */1],
              /* years */state[/* years */2],
              /* months */state[/* months */3],
              /* days */match[1],
              /* hours */match[0],
              /* minutes : [] */0
            ]
          ];
  }
}

function updateMinutes(param, param$1, update, state) {
  var minute = param$1[/* minute */5];
  if (!update && param[/* minute */5] === minute) {
    return /* tuple */[
            /* false */0,
            state
          ];
  } else {
    var match = partitionBy(/* :: */[
          state[/* hours */5],
          /* :: */[
            state[/* minutes */6],
            /* [] */0
          ]
        ], (function (param) {
            return NactCron_Evaluators.isInMinute(minute, param[1][/* minutes */0]);
          }));
    return /* tuple */[
            /* true */1,
            /* record */[
              /* prevTime */state[/* prevTime */0],
              /* schedules */state[/* schedules */1],
              /* years */state[/* years */2],
              /* months */state[/* months */3],
              /* days */state[/* days */4],
              /* hours */match[1],
              /* minutes */match[0]
            ]
          ];
  }
}

function thread(prevState, prevTime, time, functions) {
  return Belt_List.reduce(functions, /* tuple */[
                /* false */0,
                prevState
              ], (function (param, f) {
                  return Curry._4(f, prevTime, time, param[0], param[1]);
                }))[1];
}

function update(prevState, time) {
  var newrecord = thread(prevState, prevState[/* prevTime */0], time, /* :: */[
          updateYears,
          /* :: */[
            updateMonths,
            /* :: */[
              updateDays,
              /* :: */[
                updateHours,
                /* :: */[
                  updateMinutes,
                  /* [] */0
                ]
              ]
            ]
          ]
        ]).slice();
  newrecord[/* prevTime */0] = time;
  return newrecord;
}

function getPendingJobs(param) {
  return param[/* minutes */6];
}

function addJob(state, expr, msg) {
  var job_000 = Random.$$int(1073741823);
  var job = /* Schedule */[
    job_000,
    expr,
    msg
  ];
  var time = state[/* prevTime */0];
  var updatedState;
  if (NactCron_Evaluators.isInYear(time[/* year */0], expr[/* years */5])) {
    if (NactCron_Evaluators.isInMonth(time[/* month */1], expr[/* months */3])) {
      if (NactCron_Evaluators.isInDayOfMonth(time[/* dayOfMonth */2], time[/* dayOfWeek */3], time[/* daysInMonth */6], expr[/* daysOfMonth */2])) {
        if (NactCron_Evaluators.isInDayOfWeek(time[/* dayOfMonth */2], time[/* dayOfWeek */3], time[/* daysInMonth */6], expr[/* daysOfWeek */4])) {
          if (NactCron_Evaluators.isInHour(time[/* hour */4], expr[/* hours */1])) {
            if (NactCron_Evaluators.isInMinute(time[/* hour */4], expr[/* hours */1])) {
              var newrecord = state.slice();
              newrecord[/* minutes */6] = /* :: */[
                job,
                state[/* minutes */6]
              ];
              updatedState = newrecord;
            } else {
              var newrecord$1 = state.slice();
              newrecord$1[/* hours */5] = /* :: */[
                job,
                state[/* hours */5]
              ];
              updatedState = newrecord$1;
            }
          } else {
            var newrecord$2 = state.slice();
            newrecord$2[/* days */4] = /* :: */[
              job,
              state[/* days */4]
            ];
            updatedState = newrecord$2;
          }
        } else {
          var newrecord$3 = state.slice();
          newrecord$3[/* months */3] = /* :: */[
            job,
            state[/* months */3]
          ];
          updatedState = newrecord$3;
        }
      } else {
        var newrecord$4 = state.slice();
        newrecord$4[/* months */3] = /* :: */[
          job,
          state[/* months */3]
        ];
        updatedState = newrecord$4;
      }
    } else {
      var newrecord$5 = state.slice();
      newrecord$5[/* years */2] = /* :: */[
        job,
        state[/* years */2]
      ];
      updatedState = newrecord$5;
    }
  } else {
    var newrecord$6 = state.slice();
    newrecord$6[/* schedules */1] = /* :: */[
      job,
      state[/* schedules */1]
    ];
    updatedState = newrecord$6;
  }
  return /* tuple */[
          job,
          updatedState
        ];
}

function scheduleDoesNotHaveId(sId, param) {
  return +(sId !== param[0]);
}

function getJobs(state) {
  return Belt_List.concatMany(/* array */[
              state[/* schedules */1],
              state[/* years */2],
              state[/* months */3],
              state[/* days */4],
              state[/* hours */5],
              state[/* minutes */6]
            ]);
}

function tryFindJob(state, targetId) {
  return Belt_Option.getWithDefault(Belt_List.getBy(/* :: */[
                  Belt_List.getBy(state[/* schedules */1], (function (param) {
                          return +(param[0] === targetId);
                        })),
                  /* :: */[
                    Belt_List.getBy(state[/* years */2], (function (param) {
                            return +(param[0] === targetId);
                          })),
                    /* :: */[
                      Belt_List.getBy(state[/* months */3], (function (param) {
                              return +(param[0] === targetId);
                            })),
                      /* :: */[
                        Belt_List.getBy(state[/* days */4], (function (param) {
                                return +(param[0] === targetId);
                              })),
                        /* :: */[
                          Belt_List.getBy(state[/* hours */5], (function (param) {
                                  return +(param[0] === targetId);
                                })),
                          /* :: */[
                            Belt_List.getBy(state[/* minutes */6], (function (param) {
                                    return +(param[0] === targetId);
                                  })),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ], (function (param) {
                    if (param) {
                      return /* true */1;
                    } else {
                      return /* false */0;
                    }
                  })), /* None */0);
}

function removeJob(state, id) {
  return /* record */[
          /* prevTime */state[/* prevTime */0],
          /* schedules */Belt_List.keep(state[/* schedules */1], (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                })),
          /* years */Belt_List.keep(state[/* years */2], (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                })),
          /* months */Belt_List.keep(state[/* months */3], (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                })),
          /* days */Belt_List.keep(state[/* days */4], (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                })),
          /* hours */Belt_List.keep(state[/* hours */5], (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                })),
          /* minutes */Belt_List.keep(state[/* minutes */6], (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                }))
        ];
}

var Expression = 0;

var ScheduleId = [(function (prim) {
      return prim;
    })];

var empty = /* record */[
  /* prevTime : record */[
    /* year */-1,
    /* month */-1,
    /* dayOfMonth */-1,
    /* dayOfWeek */-1,
    /* hour */-1,
    /* minute */-1,
    /* daysInMonth */-1
  ],
  /* schedules : [] */0,
  /* years : [] */0,
  /* months : [] */0,
  /* days : [] */0,
  /* hours : [] */0,
  /* minutes : [] */0
];

exports.Expression = Expression;
exports.Time = Time;
exports.ScheduleId = ScheduleId;
exports.empty = empty;
exports.update = update;
exports.getPendingJobs = getPendingJobs;
exports.getJobs = getJobs;
exports.tryFindJob = tryFindJob;
exports.addJob = addJob;
exports.removeJob = removeJob;
/* No side effect */
