// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Nact = require("reason-nact/src/Nact.js");
var Block = require("bs-platform/lib/js/block.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Expression$NactRecron = require("./Expression.bs.js");
var Scheduling$NactRecron = require("./Scheduling.bs.js");

function $$setInterval$1(state, ctx) {
  if (state[/* interval */1]) {
    return state;
  } else {
    return /* record */[
            /* scheduleState */state[/* scheduleState */0],
            /* interval : Some */[setInterval((function () {
                      return Nact.Operators[/* <-< */0](ctx[/* self */2], /* DispatchPendingJobs */-611577581);
                    }), 30000)]
          ];
  }
}

function make(parent, key) {
  return Nact.spawnPersistent(key, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, parent, (function (state, msg, ctx) {
                var state$1 = $$setInterval$1(state, ctx);
                if (typeof msg === "number") {
                  var state$2 = state$1;
                  var scheduleState = Scheduling$NactRecron.update(Scheduling$NactRecron.Time[/* fromDate */0](new Date()), state$2[/* scheduleState */0]);
                  Belt_List.forEach(Scheduling$NactRecron.getPendingJobs(scheduleState), (function (param) {
                          var match = param[2];
                          return Nact.Operators[/* <-< */0](match[0], match[1]);
                        }));
                  return Promise.resolve(/* record */[
                              /* scheduleState */scheduleState,
                              /* interval */state$2[/* interval */1]
                            ]);
                } else {
                  var variant = msg[0];
                  if (variant >= 726695270) {
                    if (variant >= 991771725) {
                      var state$3 = state$1;
                      var requestee = msg[1];
                      Nact.Operators[/* <-< */0](requestee, /* `ScheduledJobs */[
                            -17693053,
                            Scheduling$NactRecron.getJobs(state$3[/* scheduleState */0])
                          ]);
                      return Promise.resolve(state$3);
                    } else {
                      var match = msg[1];
                      var state$4 = state$1;
                      var id = match[0];
                      var requestee$1 = match[1];
                      var match$1 = Scheduling$NactRecron.tryFindJob(state$4[/* scheduleState */0], id);
                      if (match$1) {
                        Nact.Operators[/* <-< */0](requestee$1, /* `FoundScheduledJob */[
                              421824786,
                              match$1[0]
                            ]);
                      } else {
                        Nact.Operators[/* <-< */0](requestee$1, /* `ScheduledJobNotFound */[
                              -747017153,
                              id
                            ]);
                      }
                      return Promise.resolve(state$4);
                    }
                  } else if (variant >= -202624238) {
                    var match$2 = msg[1];
                    var state$5 = state$1;
                    var id$1 = match$2[0];
                    var requestee$2 = match$2[1];
                    var scheduleState$1 = Scheduling$NactRecron.removeJob(state$5[/* scheduleState */0], id$1);
                    Nact.Operators[/* <-< */0](requestee$2, /* `ScheduledJobStarted */[
                          -587316431,
                          id$1
                        ]);
                    return Promise.resolve(/* record */[
                                /* scheduleState */scheduleState$1,
                                /* interval */state$5[/* interval */1]
                              ]);
                  } else {
                    var state$6 = state$1;
                    var param = msg;
                    var match$3 = param[1];
                    var requestee$3 = match$3[3];
                    var expr = match$3[0];
                    var parsedExpression;
                    try {
                      parsedExpression = /* Ok */Block.__(0, [Expression$NactRecron.parse(expr)]);
                    }
                    catch (exn){
                      if (exn === Expression$NactRecron.MalformedCronExpression) {
                        parsedExpression = /* Error */Block.__(1, [/* `MalformedCronExpression */[
                              647496001,
                              expr
                            ]]);
                      } else {
                        throw exn;
                      }
                    }
                    if (parsedExpression.tag) {
                      Nact.Operators[/* <-< */0](requestee$3, parsedExpression[0]);
                      return Promise.resolve(state$6);
                    } else {
                      var match$4 = Scheduling$NactRecron.addJob(state$6[/* scheduleState */0], parsedExpression[0], /* tuple */[
                            match$3[2],
                            match$3[1]
                          ]);
                      Nact.Operators[/* <-< */0](requestee$3, /* `ScheduledJobStarted */[
                            -587316431,
                            match$4[0][0]
                          ]);
                      return Promise.resolve(/* record */[
                                  /* scheduleState */match$4[1],
                                  /* interval */state$6[/* interval */1]
                                ]);
                    }
                  }
                }
              }), /* record */[
              /* scheduleState */Scheduling$NactRecron.empty,
              /* interval : None */0
            ]);
}

exports.make = make;
/* Nact Not a pure module */
